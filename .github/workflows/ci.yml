name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: smart-memory-mcp-linux
            binary_name: smart-memory-mcp-core
          - os: windows-latest
            platform: windows
            artifact_name: smart-memory-mcp-windows
            binary_name: smart-memory-mcp-core.exe
          - os: macos-latest
            platform: macos
            artifact_name: smart-memory-mcp-macos
            binary_name: smart-memory-mcp-core

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'extension/package-lock.json'

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Build Core
      working-directory: ./core
      run: cargo build --release

    - name: Test Core
      working-directory: ./core
      run: cargo test

    - name: Build Extension
      working-directory: ./extension
      run: |
        npm ci
        npm run build

    - name: Test Extension
      working-directory: ./extension
      run: npm test

    - name: Create Artifact Directories
      shell: bash
      run: |
        mkdir -p artifacts/bin/${{ matrix.platform }}
        mkdir -p artifacts/vsix

    - name: Copy Binary
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp core/target/release/${{ matrix.binary_name }} artifacts/bin/${{ matrix.platform }}/
        else
          cp core/target/release/${{ matrix.binary_name }} artifacts/bin/${{ matrix.platform }}/
          chmod +x artifacts/bin/${{ matrix.platform }}/${{ matrix.binary_name }}
        fi

    - name: Upload Binary
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: artifacts/bin/${{ matrix.platform }}/${{ matrix.binary_name }}
        if-no-files-found: error

    - name: Package Extension (Linux only)
      if: matrix.os == 'ubuntu-latest'
      working-directory: ./extension
      run: |
        npm run package
        cp *.vsix ../artifacts/vsix/

    - name: Upload VSIX Package (Linux only)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: vsix-package
        path: artifacts/vsix/*.vsix
        if-no-files-found: error

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Create Artifact Directories
      run: |
        mkdir -p artifacts/bin/linux
        mkdir -p artifacts/bin/windows
        mkdir -p artifacts/bin/macos
        mkdir -p artifacts/vsix

    - name: Download Linux Binary
      uses: actions/download-artifact@v3
      with:
        name: smart-memory-mcp-linux
        path: artifacts/bin/linux

    - name: Download Windows Binary
      uses: actions/download-artifact@v3
      with:
        name: smart-memory-mcp-windows
        path: artifacts/bin/windows

    - name: Download macOS Binary
      uses: actions/download-artifact@v3
      with:
        name: smart-memory-mcp-macos
        path: artifacts/bin/macos

    - name: Download VSIX Package
      uses: actions/download-artifact@v3
      with:
        name: vsix-package
        path: artifacts/vsix

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/bin/linux/smart-memory-mcp-core
          artifacts/bin/windows/smart-memory-mcp-core.exe
          artifacts/bin/macos/smart-memory-mcp-core
          artifacts/vsix/*.vsix
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Publish to VS Code Marketplace
      if: success()
      run: |
        npm install -g vsce
        vsce publish -p ${{ secrets.VSCE_PAT }} --packagePath artifacts/vsix/*.vsix