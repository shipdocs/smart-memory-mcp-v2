name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: smart-memory-mcp-core
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: smart-memory-mcp-core.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: smart-memory-mcp-core

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'extension/package-lock.json'
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        components: rustfmt, clippy
    
    - name: Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "core -> target"
    
    - name: Check formatting
      working-directory: ./core
      run: cargo fmt --all -- --check
    
    - name: Clippy
      working-directory: ./core
      run: cargo clippy -- -D warnings
    
    - name: Build
      working-directory: ./core
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Run tests
      working-directory: ./core
      run: cargo test --release --target ${{ matrix.target }}
    
    - name: Install extension dependencies
      working-directory: ./extension
      run: npm ci
    
    - name: Lint extension
      working-directory: ./extension
      run: npm run lint
    
    - name: Build extension
      working-directory: ./extension
      run: npm run build
    
    - name: Test extension
      working-directory: ./extension
      run: npm test
    
    - name: Create bin directory
      run: mkdir -p extension/bin/${{ matrix.os }}
    
    - name: Copy binary to extension
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp core/target/${{ matrix.target }}/release/${{ matrix.binary_name }} extension/bin/windows/
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          cp core/target/${{ matrix.target }}/release/${{ matrix.binary_name }} extension/bin/macos/
        else
          cp core/target/${{ matrix.target }}/release/${{ matrix.binary_name }} extension/bin/linux/
        fi
      shell: bash
    
    - name: Upload binary artifact
      uses: actions/upload-artifact@v3
      with:
        name: smart-memory-mcp-${{ matrix.os }}
        path: core/target/${{ matrix.target }}/release/${{ matrix.binary_name }}
    
    - name: Package extension
      if: matrix.os == 'ubuntu-latest'
      working-directory: ./extension
      run: npm run package
    
    - name: Upload VSIX artifact
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: smart-memory-mcp-extension
        path: extension/*.vsix

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Display structure of downloaded files
      run: ls -R artifacts
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    
    - name: Upload Linux Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/smart-memory-mcp-ubuntu-latest/smart-memory-mcp-core
        asset_name: smart-memory-mcp-core-linux
        asset_content_type: application/octet-stream
    
    - name: Upload Windows Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/smart-memory-mcp-windows-latest/smart-memory-mcp-core.exe
        asset_name: smart-memory-mcp-core-windows.exe
        asset_content_type: application/octet-stream
    
    - name: Upload macOS Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/smart-memory-mcp-macos-latest/smart-memory-mcp-core
        asset_name: smart-memory-mcp-core-macos
        asset_content_type: application/octet-stream
    
    - name: Upload VS Code Extension
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/smart-memory-mcp-extension/*.vsix
        asset_name: smart-memory-mcp-extension.vsix
        asset_content_type: application/octet-stream

  publish:
    name: Publish Extension
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
    - name: Download VSIX artifact
      uses: actions/download-artifact@v3
      with:
        name: smart-memory-mcp-extension
        path: extension
    
    - name: Publish to Visual Studio Marketplace
      if: success()
      run: |
        npx vsce publish -p ${{ secrets.VSCE_PAT }} --packagePath extension/*.vsix
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}