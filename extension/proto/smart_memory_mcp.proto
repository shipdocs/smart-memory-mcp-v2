syntax = "proto3";

package smart_memory_mcp;

service SmartMemoryMcp {
  // Memory operations
  rpc StoreMemory(StoreRequest) returns (StoreResponse);
  rpc RetrieveMemory(RetrieveRequest) returns (RetrieveResponse);
  rpc OptimizeMemory(OptimizeRequest) returns (OptimizeResponse);

  // Context operations
  rpc GetContext(ContextRequest) returns (ContextResponse);
  rpc UpdateContext(UpdateContextRequest) returns (UpdateContextResponse);
  rpc PredictContext(PredictRequest) returns (PredictResponse);

  // Mode operations
  rpc SwitchMode(SwitchModeRequest) returns (SwitchModeResponse);
  rpc AnalyzeMode(AnalyzeModeRequest) returns (AnalyzeModeResponse);

  // Metrics operations
  rpc GetMetrics(MetricsRequest) returns (MetricsResponse);
  rpc TrackUsage(UsageRequest) returns (UsageResponse);
}

// Memory operations

message StoreRequest {
  string content = 1;
  string content_type = 2;
  map<string, string> metadata = 3;
  bool compress = 4;
}

message StoreResponse {
  string memory_id = 1;
  uint32 token_count = 2;
  double compression_ratio = 3;
}

message RetrieveRequest {
  string memory_id = 1;
  bool include_metadata = 2;
}

message RetrieveResponse {
  string content = 1;
  map<string, string> metadata = 2;
  uint32 token_count = 3;
}

message OptimizeRequest {
  repeated string memory_ids = 1;
  OptimizationStrategy strategy = 2;
  Priority priority = 3;
}

message OptimizeResponse {
  uint32 tokens_saved = 1;
  double optimization_ratio = 2;
  repeated string optimized_ids = 3;
}

// Context operations

message ContextRequest {
  string mode = 1;
  uint32 max_tokens = 2;
  double relevance_threshold = 3;
}

message ContextResponse {
  string context = 1;
  uint32 token_count = 2;
  double relevance_score = 3;
  repeated ContextSource sources = 4;
}

message ContextSource {
  string source_id = 1;
  string source_type = 2;
  double relevance = 3;
}

message UpdateContextRequest {
  string mode = 1;
  string content = 2;
  bool append = 3;
}

message UpdateContextResponse {
  bool success = 1;
  uint32 new_token_count = 2;
  repeated string affected_modes = 3;
}

message PredictRequest {
  string current_mode = 1;
  string user_activity = 2;
}

message PredictResponse {
  string predicted_context = 1;
  double confidence = 2;
  uint32 estimated_tokens = 3;
}

// Mode operations

message SwitchModeRequest {
  string new_mode = 1;
  bool preserve_context = 2;
}

message SwitchModeResponse {
  bool success = 1;
  uint32 preserved_tokens = 2;
  string previous_mode = 3;
}

message AnalyzeModeRequest {
  string mode = 1;
  uint32 time_period_days = 2;
}

message AnalyzeModeResponse {
  double effectiveness_score = 1;
  uint32 average_tokens = 2;
  repeated Metric metrics = 3;
}

// Metrics operations

message MetricsRequest {
  uint32 time_period_days = 1;
  repeated string modes = 2;
}

message MetricsResponse {
  repeated Metric metrics = 1;
  UsageStats usage = 2;
  repeated Trend trends = 3;
}

message Metric {
  string name = 1;
  string value = 2;
  string unit = 3;
  double change = 4;
}

message UsageStats {
  uint32 total_tokens = 1;
  uint32 total_memories = 2;
  map<string, uint32> tokens_by_mode = 3;
}

message Trend {
  string name = 1;
  repeated double values = 2;
  repeated string labels = 3;
}

message UsageRequest {
  string mode = 1;
  uint32 tokens_used = 2;
  string activity = 3;
}

message UsageResponse {
  bool recorded = 1;
  uint32 session_tokens = 2;
  uint32 daily_tokens = 3;
}

// Enums

enum OptimizationStrategy {
  BALANCED = 0;
  AGGRESSIVE = 1;
  CONSERVATIVE = 2;
}

enum Priority {
  NORMAL = 0;
  HIGH = 1;
  LOW = 2;
}
