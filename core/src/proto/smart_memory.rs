// This file is @generated by prost-build.
/// Message definitions
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreRequest {
    #[prost(string, tag = "1")]
    pub content: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub content_type: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "3")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(bool, tag = "4")]
    pub compress: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreResponse {
    #[prost(string, tag = "1")]
    pub memory_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub token_count: u32,
    #[prost(float, tag = "3")]
    pub compression_ratio: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RetrieveRequest {
    #[prost(string, tag = "1")]
    pub memory_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub include_metadata: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RetrieveResponse {
    #[prost(string, tag = "1")]
    pub content: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "2")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(uint32, tag = "3")]
    pub token_count: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OptimizeRequest {
    #[prost(string, repeated, tag = "1")]
    pub memory_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(enumeration = "OptimizationStrategy", tag = "2")]
    pub strategy: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OptimizeResponse {
    #[prost(uint32, tag = "1")]
    pub tokens_saved: u32,
    #[prost(float, tag = "2")]
    pub optimization_ratio: f32,
    #[prost(string, repeated, tag = "3")]
    pub optimized_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContextRequest {
    #[prost(string, tag = "1")]
    pub mode: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub max_tokens: u32,
    #[prost(float, tag = "3")]
    pub relevance_threshold: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContextResponse {
    #[prost(string, tag = "1")]
    pub context: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub token_count: u32,
    #[prost(float, tag = "3")]
    pub relevance_score: f32,
    #[prost(message, repeated, tag = "4")]
    pub sources: ::prost::alloc::vec::Vec<ContextSource>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateContextRequest {
    #[prost(string, tag = "1")]
    pub mode: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub content: ::prost::alloc::string::String,
    #[prost(enumeration = "Priority", tag = "3")]
    pub priority: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateContextResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(uint32, tag = "2")]
    pub new_token_count: u32,
    #[prost(string, repeated, tag = "3")]
    pub affected_modes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PredictRequest {
    #[prost(string, tag = "1")]
    pub current_mode: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub user_activity: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PredictResponse {
    #[prost(string, tag = "1")]
    pub predicted_context: ::prost::alloc::string::String,
    #[prost(float, tag = "2")]
    pub confidence: f32,
    #[prost(uint32, tag = "3")]
    pub estimated_tokens: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwitchModeRequest {
    #[prost(string, tag = "1")]
    pub target_mode: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub preserve_context: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwitchModeResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(uint32, tag = "2")]
    pub preserved_tokens: u32,
    #[prost(string, tag = "3")]
    pub previous_mode: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalyzeModeRequest {
    #[prost(string, tag = "1")]
    pub mode: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub time_window: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalyzeModeResponse {
    #[prost(float, tag = "1")]
    pub effectiveness_score: f32,
    #[prost(uint32, tag = "2")]
    pub average_tokens: u32,
    #[prost(message, repeated, tag = "3")]
    pub metrics: ::prost::alloc::vec::Vec<ModeMetric>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetricsRequest {
    #[prost(uint32, tag = "1")]
    pub time_range: u32,
    #[prost(string, repeated, tag = "2")]
    pub metric_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetricsResponse {
    #[prost(message, repeated, tag = "1")]
    pub metrics: ::prost::alloc::vec::Vec<Metric>,
    #[prost(message, optional, tag = "2")]
    pub usage: ::core::option::Option<Usage>,
    #[prost(message, repeated, tag = "3")]
    pub trends: ::prost::alloc::vec::Vec<Trend>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UsageRequest {
    #[prost(string, tag = "1")]
    pub mode: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub action: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "3")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UsageResponse {
    #[prost(bool, tag = "1")]
    pub recorded: bool,
    #[prost(uint32, tag = "2")]
    pub session_tokens: u32,
    #[prost(uint32, tag = "3")]
    pub daily_tokens: u32,
}
/// Complex types
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContextSource {
    #[prost(string, tag = "1")]
    pub source_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub source_type: ::prost::alloc::string::String,
    #[prost(float, tag = "3")]
    pub relevance: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModeMetric {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(float, tag = "2")]
    pub value: f32,
    #[prost(string, tag = "3")]
    pub unit: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Metric {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(float, tag = "2")]
    pub value: f32,
    #[prost(uint64, tag = "3")]
    pub timestamp: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Usage {
    #[prost(uint32, tag = "1")]
    pub total_tokens: u32,
    #[prost(uint32, tag = "2")]
    pub optimized_tokens: u32,
    #[prost(float, tag = "3")]
    pub cost_saved: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Trend {
    #[prost(string, tag = "1")]
    pub metric_name: ::prost::alloc::string::String,
    #[prost(float, repeated, tag = "2")]
    pub values: ::prost::alloc::vec::Vec<f32>,
    #[prost(uint64, repeated, tag = "3")]
    pub timestamps: ::prost::alloc::vec::Vec<u64>,
}
/// Memory Bank message definitions
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemoryBankStoreRequest {
    #[prost(string, tag = "1")]
    pub content: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub category: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub mode: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "4")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "5")]
    pub date: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemoryBankStoreResponse {
    #[prost(string, tag = "1")]
    pub memory_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub token_count: u32,
    #[prost(string, tag = "3")]
    pub category: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub success: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemoryBankContextRequest {
    #[prost(string, tag = "1")]
    pub mode: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub max_tokens: u32,
    #[prost(string, repeated, tag = "3")]
    pub categories: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(float, tag = "4")]
    pub relevance_threshold: f32,
    #[prost(string, tag = "5")]
    pub date: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemoryBankContextResponse {
    #[prost(string, tag = "1")]
    pub context: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub token_count: u32,
    #[prost(float, tag = "3")]
    pub relevance_score: f32,
    #[prost(message, repeated, tag = "4")]
    pub sources: ::prost::alloc::vec::Vec<MemoryBankSource>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemoryBankSource {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub category: ::prost::alloc::string::String,
    #[prost(float, tag = "3")]
    pub relevance: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemoryBankOptimizeRequest {
    #[prost(string, repeated, tag = "1")]
    pub categories: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, tag = "2")]
    pub target_tokens: u32,
    #[prost(string, tag = "3")]
    pub strategy: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemoryBankOptimizeResponse {
    #[prost(uint32, tag = "1")]
    pub tokens_before: u32,
    #[prost(uint32, tag = "2")]
    pub tokens_after: u32,
    #[prost(uint32, tag = "3")]
    pub tokens_saved: u32,
    #[prost(uint32, tag = "4")]
    pub optimized_memories: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemoryBankStatsRequest {
    #[prost(uint32, tag = "1")]
    pub days: u32,
    #[prost(string, repeated, tag = "2")]
    pub categories: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemoryBankStatsResponse {
    #[prost(uint32, tag = "1")]
    pub total_memories: u32,
    #[prost(uint32, tag = "2")]
    pub total_tokens: u32,
    #[prost(map = "string, uint32", tag = "3")]
    pub tokens_by_category: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        u32,
    >,
    #[prost(map = "string, uint32", tag = "4")]
    pub memories_by_category: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        u32,
    >,
    #[prost(message, repeated, tag = "5")]
    pub category_stats: ::prost::alloc::vec::Vec<MemoryBankCategoryStats>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemoryBankCategoryStats {
    #[prost(string, tag = "1")]
    pub category: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub memory_count: u32,
    #[prost(uint32, tag = "3")]
    pub token_count: u32,
    #[prost(float, tag = "4")]
    pub average_relevance: f32,
    #[prost(string, tag = "5")]
    pub last_updated: ::prost::alloc::string::String,
}
/// UMB command messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UmbCommandRequest {
    #[prost(string, tag = "1")]
    pub current_mode: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub current_context: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "3")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UmbCommandResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(uint32, tag = "2")]
    pub stored_memories: u32,
    #[prost(uint32, tag = "3")]
    pub total_tokens: u32,
    #[prost(string, repeated, tag = "4")]
    pub categories: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "5")]
    pub message: ::prost::alloc::string::String,
}
/// Health check messages
///
/// Empty request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthCheckRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthCheckResponse {
    #[prost(enumeration = "health_check_response::ServingStatus", tag = "1")]
    pub status: i32,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// Nested message and enum types in `HealthCheckResponse`.
pub mod health_check_response {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ServingStatus {
        Unknown = 0,
        Serving = 1,
        NotServing = 2,
        ServiceUnknown = 3,
    }
    impl ServingStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ServingStatus::Unknown => "UNKNOWN",
                ServingStatus::Serving => "SERVING",
                ServingStatus::NotServing => "NOT_SERVING",
                ServingStatus::ServiceUnknown => "SERVICE_UNKNOWN",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNKNOWN" => Some(Self::Unknown),
                "SERVING" => Some(Self::Serving),
                "NOT_SERVING" => Some(Self::NotServing),
                "SERVICE_UNKNOWN" => Some(Self::ServiceUnknown),
                _ => None,
            }
        }
    }
}
/// Empty request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatusRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatusResponse {
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub uptime_seconds: u64,
    #[prost(uint32, tag = "3")]
    pub memory_usage_mb: u32,
    #[prost(uint32, tag = "4")]
    pub total_memories: u32,
    #[prost(uint32, tag = "5")]
    pub total_tokens: u32,
    #[prost(map = "string, string", tag = "6")]
    pub system_info: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(message, repeated, tag = "7")]
    pub components: ::prost::alloc::vec::Vec<ComponentStatus>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComponentStatus {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub version: ::prost::alloc::string::String,
    #[prost(uint64, tag = "4")]
    pub last_updated: u64,
}
/// Enums
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OptimizationStrategy {
    Balanced = 0,
    Aggressive = 1,
    Conservative = 2,
}
impl OptimizationStrategy {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            OptimizationStrategy::Balanced => "BALANCED",
            OptimizationStrategy::Aggressive => "AGGRESSIVE",
            OptimizationStrategy::Conservative => "CONSERVATIVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BALANCED" => Some(Self::Balanced),
            "AGGRESSIVE" => Some(Self::Aggressive),
            "CONSERVATIVE" => Some(Self::Conservative),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Priority {
    Low = 0,
    Medium = 1,
    High = 2,
    Critical = 3,
}
impl Priority {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Priority::Low => "LOW",
            Priority::Medium => "MEDIUM",
            Priority::High => "HIGH",
            Priority::Critical => "CRITICAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LOW" => Some(Self::Low),
            "MEDIUM" => Some(Self::Medium),
            "HIGH" => Some(Self::High),
            "CRITICAL" => Some(Self::Critical),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod health_check_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Health check service definition
    #[derive(Debug, Clone)]
    pub struct HealthCheckClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl HealthCheckClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> HealthCheckClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> HealthCheckClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            HealthCheckClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Check if the server is running
        pub async fn check(
            &mut self,
            request: impl tonic::IntoRequest<super::HealthCheckRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HealthCheckResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/smart_memory.HealthCheck/Check",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("smart_memory.HealthCheck", "Check"));
            self.inner.unary(req, path, codec).await
        }
        /// Get server version and status
        pub async fn get_status(
            &mut self,
            request: impl tonic::IntoRequest<super::StatusRequest>,
        ) -> std::result::Result<tonic::Response<super::StatusResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/smart_memory.HealthCheck/GetStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("smart_memory.HealthCheck", "GetStatus"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod smart_memory_mcp_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Main MCP service definition
    #[derive(Debug, Clone)]
    pub struct SmartMemoryMcpClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl SmartMemoryMcpClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> SmartMemoryMcpClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> SmartMemoryMcpClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            SmartMemoryMcpClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Memory management
        pub async fn store_memory(
            &mut self,
            request: impl tonic::IntoRequest<super::StoreRequest>,
        ) -> std::result::Result<tonic::Response<super::StoreResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/smart_memory.SmartMemoryMcp/StoreMemory",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("smart_memory.SmartMemoryMcp", "StoreMemory"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn retrieve_memory(
            &mut self,
            request: impl tonic::IntoRequest<super::RetrieveRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RetrieveResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/smart_memory.SmartMemoryMcp/RetrieveMemory",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("smart_memory.SmartMemoryMcp", "RetrieveMemory"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn optimize_memory(
            &mut self,
            request: impl tonic::IntoRequest<super::OptimizeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OptimizeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/smart_memory.SmartMemoryMcp/OptimizeMemory",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("smart_memory.SmartMemoryMcp", "OptimizeMemory"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Context operations
        pub async fn get_context(
            &mut self,
            request: impl tonic::IntoRequest<super::ContextRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ContextResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/smart_memory.SmartMemoryMcp/GetContext",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("smart_memory.SmartMemoryMcp", "GetContext"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_context(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateContextRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateContextResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/smart_memory.SmartMemoryMcp/UpdateContext",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("smart_memory.SmartMemoryMcp", "UpdateContext"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn predict_context(
            &mut self,
            request: impl tonic::IntoRequest<super::PredictRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PredictResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/smart_memory.SmartMemoryMcp/PredictContext",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("smart_memory.SmartMemoryMcp", "PredictContext"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Mode management
        pub async fn switch_mode(
            &mut self,
            request: impl tonic::IntoRequest<super::SwitchModeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SwitchModeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/smart_memory.SmartMemoryMcp/SwitchMode",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("smart_memory.SmartMemoryMcp", "SwitchMode"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn analyze_mode(
            &mut self,
            request: impl tonic::IntoRequest<super::AnalyzeModeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AnalyzeModeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/smart_memory.SmartMemoryMcp/AnalyzeMode",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("smart_memory.SmartMemoryMcp", "AnalyzeMode"));
            self.inner.unary(req, path, codec).await
        }
        /// Analytics
        pub async fn get_metrics(
            &mut self,
            request: impl tonic::IntoRequest<super::MetricsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MetricsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/smart_memory.SmartMemoryMcp/GetMetrics",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("smart_memory.SmartMemoryMcp", "GetMetrics"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn track_usage(
            &mut self,
            request: impl tonic::IntoRequest<super::UsageRequest>,
        ) -> std::result::Result<tonic::Response<super::UsageResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/smart_memory.SmartMemoryMcp/TrackUsage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("smart_memory.SmartMemoryMcp", "TrackUsage"));
            self.inner.unary(req, path, codec).await
        }
        /// Memory Bank operations
        pub async fn store_memory_bank(
            &mut self,
            request: impl tonic::IntoRequest<super::MemoryBankStoreRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MemoryBankStoreResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/smart_memory.SmartMemoryMcp/StoreMemoryBank",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("smart_memory.SmartMemoryMcp", "StoreMemoryBank"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_memory_bank_context(
            &mut self,
            request: impl tonic::IntoRequest<super::MemoryBankContextRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MemoryBankContextResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/smart_memory.SmartMemoryMcp/GetMemoryBankContext",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "smart_memory.SmartMemoryMcp",
                        "GetMemoryBankContext",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn optimize_memory_bank(
            &mut self,
            request: impl tonic::IntoRequest<super::MemoryBankOptimizeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MemoryBankOptimizeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/smart_memory.SmartMemoryMcp/OptimizeMemoryBank",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("smart_memory.SmartMemoryMcp", "OptimizeMemoryBank"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_memory_bank_stats(
            &mut self,
            request: impl tonic::IntoRequest<super::MemoryBankStatsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MemoryBankStatsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/smart_memory.SmartMemoryMcp/GetMemoryBankStats",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("smart_memory.SmartMemoryMcp", "GetMemoryBankStats"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UMB command handler
        pub async fn handle_umb_command(
            &mut self,
            request: impl tonic::IntoRequest<super::UmbCommandRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UmbCommandResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/smart_memory.SmartMemoryMcp/HandleUmbCommand",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("smart_memory.SmartMemoryMcp", "HandleUmbCommand"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod health_check_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with HealthCheckServer.
    #[async_trait]
    pub trait HealthCheck: Send + Sync + 'static {
        /// Check if the server is running
        async fn check(
            &self,
            request: tonic::Request<super::HealthCheckRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HealthCheckResponse>,
            tonic::Status,
        >;
        /// Get server version and status
        async fn get_status(
            &self,
            request: tonic::Request<super::StatusRequest>,
        ) -> std::result::Result<tonic::Response<super::StatusResponse>, tonic::Status>;
    }
    /// Health check service definition
    #[derive(Debug)]
    pub struct HealthCheckServer<T: HealthCheck> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: HealthCheck> HealthCheckServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for HealthCheckServer<T>
    where
        T: HealthCheck,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/smart_memory.HealthCheck/Check" => {
                    #[allow(non_camel_case_types)]
                    struct CheckSvc<T: HealthCheck>(pub Arc<T>);
                    impl<
                        T: HealthCheck,
                    > tonic::server::UnaryService<super::HealthCheckRequest>
                    for CheckSvc<T> {
                        type Response = super::HealthCheckResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HealthCheckRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HealthCheck>::check(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CheckSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/smart_memory.HealthCheck/GetStatus" => {
                    #[allow(non_camel_case_types)]
                    struct GetStatusSvc<T: HealthCheck>(pub Arc<T>);
                    impl<
                        T: HealthCheck,
                    > tonic::server::UnaryService<super::StatusRequest>
                    for GetStatusSvc<T> {
                        type Response = super::StatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HealthCheck>::get_status(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: HealthCheck> Clone for HealthCheckServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: HealthCheck> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: HealthCheck> tonic::server::NamedService for HealthCheckServer<T> {
        const NAME: &'static str = "smart_memory.HealthCheck";
    }
}
/// Generated server implementations.
pub mod smart_memory_mcp_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with SmartMemoryMcpServer.
    #[async_trait]
    pub trait SmartMemoryMcp: Send + Sync + 'static {
        /// Memory management
        async fn store_memory(
            &self,
            request: tonic::Request<super::StoreRequest>,
        ) -> std::result::Result<tonic::Response<super::StoreResponse>, tonic::Status>;
        async fn retrieve_memory(
            &self,
            request: tonic::Request<super::RetrieveRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RetrieveResponse>,
            tonic::Status,
        >;
        async fn optimize_memory(
            &self,
            request: tonic::Request<super::OptimizeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OptimizeResponse>,
            tonic::Status,
        >;
        /// Context operations
        async fn get_context(
            &self,
            request: tonic::Request<super::ContextRequest>,
        ) -> std::result::Result<tonic::Response<super::ContextResponse>, tonic::Status>;
        async fn update_context(
            &self,
            request: tonic::Request<super::UpdateContextRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateContextResponse>,
            tonic::Status,
        >;
        async fn predict_context(
            &self,
            request: tonic::Request<super::PredictRequest>,
        ) -> std::result::Result<tonic::Response<super::PredictResponse>, tonic::Status>;
        /// Mode management
        async fn switch_mode(
            &self,
            request: tonic::Request<super::SwitchModeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SwitchModeResponse>,
            tonic::Status,
        >;
        async fn analyze_mode(
            &self,
            request: tonic::Request<super::AnalyzeModeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AnalyzeModeResponse>,
            tonic::Status,
        >;
        /// Analytics
        async fn get_metrics(
            &self,
            request: tonic::Request<super::MetricsRequest>,
        ) -> std::result::Result<tonic::Response<super::MetricsResponse>, tonic::Status>;
        async fn track_usage(
            &self,
            request: tonic::Request<super::UsageRequest>,
        ) -> std::result::Result<tonic::Response<super::UsageResponse>, tonic::Status>;
        /// Memory Bank operations
        async fn store_memory_bank(
            &self,
            request: tonic::Request<super::MemoryBankStoreRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MemoryBankStoreResponse>,
            tonic::Status,
        >;
        async fn get_memory_bank_context(
            &self,
            request: tonic::Request<super::MemoryBankContextRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MemoryBankContextResponse>,
            tonic::Status,
        >;
        async fn optimize_memory_bank(
            &self,
            request: tonic::Request<super::MemoryBankOptimizeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MemoryBankOptimizeResponse>,
            tonic::Status,
        >;
        async fn get_memory_bank_stats(
            &self,
            request: tonic::Request<super::MemoryBankStatsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MemoryBankStatsResponse>,
            tonic::Status,
        >;
        /// UMB command handler
        async fn handle_umb_command(
            &self,
            request: tonic::Request<super::UmbCommandRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UmbCommandResponse>,
            tonic::Status,
        >;
    }
    /// Main MCP service definition
    #[derive(Debug)]
    pub struct SmartMemoryMcpServer<T: SmartMemoryMcp> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: SmartMemoryMcp> SmartMemoryMcpServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for SmartMemoryMcpServer<T>
    where
        T: SmartMemoryMcp,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/smart_memory.SmartMemoryMcp/StoreMemory" => {
                    #[allow(non_camel_case_types)]
                    struct StoreMemorySvc<T: SmartMemoryMcp>(pub Arc<T>);
                    impl<
                        T: SmartMemoryMcp,
                    > tonic::server::UnaryService<super::StoreRequest>
                    for StoreMemorySvc<T> {
                        type Response = super::StoreResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StoreRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SmartMemoryMcp>::store_memory(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StoreMemorySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/smart_memory.SmartMemoryMcp/RetrieveMemory" => {
                    #[allow(non_camel_case_types)]
                    struct RetrieveMemorySvc<T: SmartMemoryMcp>(pub Arc<T>);
                    impl<
                        T: SmartMemoryMcp,
                    > tonic::server::UnaryService<super::RetrieveRequest>
                    for RetrieveMemorySvc<T> {
                        type Response = super::RetrieveResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RetrieveRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SmartMemoryMcp>::retrieve_memory(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RetrieveMemorySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/smart_memory.SmartMemoryMcp/OptimizeMemory" => {
                    #[allow(non_camel_case_types)]
                    struct OptimizeMemorySvc<T: SmartMemoryMcp>(pub Arc<T>);
                    impl<
                        T: SmartMemoryMcp,
                    > tonic::server::UnaryService<super::OptimizeRequest>
                    for OptimizeMemorySvc<T> {
                        type Response = super::OptimizeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::OptimizeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SmartMemoryMcp>::optimize_memory(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = OptimizeMemorySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/smart_memory.SmartMemoryMcp/GetContext" => {
                    #[allow(non_camel_case_types)]
                    struct GetContextSvc<T: SmartMemoryMcp>(pub Arc<T>);
                    impl<
                        T: SmartMemoryMcp,
                    > tonic::server::UnaryService<super::ContextRequest>
                    for GetContextSvc<T> {
                        type Response = super::ContextResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ContextRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SmartMemoryMcp>::get_context(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetContextSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/smart_memory.SmartMemoryMcp/UpdateContext" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateContextSvc<T: SmartMemoryMcp>(pub Arc<T>);
                    impl<
                        T: SmartMemoryMcp,
                    > tonic::server::UnaryService<super::UpdateContextRequest>
                    for UpdateContextSvc<T> {
                        type Response = super::UpdateContextResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateContextRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SmartMemoryMcp>::update_context(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UpdateContextSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/smart_memory.SmartMemoryMcp/PredictContext" => {
                    #[allow(non_camel_case_types)]
                    struct PredictContextSvc<T: SmartMemoryMcp>(pub Arc<T>);
                    impl<
                        T: SmartMemoryMcp,
                    > tonic::server::UnaryService<super::PredictRequest>
                    for PredictContextSvc<T> {
                        type Response = super::PredictResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PredictRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SmartMemoryMcp>::predict_context(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PredictContextSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/smart_memory.SmartMemoryMcp/SwitchMode" => {
                    #[allow(non_camel_case_types)]
                    struct SwitchModeSvc<T: SmartMemoryMcp>(pub Arc<T>);
                    impl<
                        T: SmartMemoryMcp,
                    > tonic::server::UnaryService<super::SwitchModeRequest>
                    for SwitchModeSvc<T> {
                        type Response = super::SwitchModeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SwitchModeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SmartMemoryMcp>::switch_mode(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SwitchModeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/smart_memory.SmartMemoryMcp/AnalyzeMode" => {
                    #[allow(non_camel_case_types)]
                    struct AnalyzeModeSvc<T: SmartMemoryMcp>(pub Arc<T>);
                    impl<
                        T: SmartMemoryMcp,
                    > tonic::server::UnaryService<super::AnalyzeModeRequest>
                    for AnalyzeModeSvc<T> {
                        type Response = super::AnalyzeModeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AnalyzeModeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SmartMemoryMcp>::analyze_mode(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = AnalyzeModeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/smart_memory.SmartMemoryMcp/GetMetrics" => {
                    #[allow(non_camel_case_types)]
                    struct GetMetricsSvc<T: SmartMemoryMcp>(pub Arc<T>);
                    impl<
                        T: SmartMemoryMcp,
                    > tonic::server::UnaryService<super::MetricsRequest>
                    for GetMetricsSvc<T> {
                        type Response = super::MetricsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MetricsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SmartMemoryMcp>::get_metrics(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetMetricsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/smart_memory.SmartMemoryMcp/TrackUsage" => {
                    #[allow(non_camel_case_types)]
                    struct TrackUsageSvc<T: SmartMemoryMcp>(pub Arc<T>);
                    impl<
                        T: SmartMemoryMcp,
                    > tonic::server::UnaryService<super::UsageRequest>
                    for TrackUsageSvc<T> {
                        type Response = super::UsageResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UsageRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SmartMemoryMcp>::track_usage(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = TrackUsageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/smart_memory.SmartMemoryMcp/StoreMemoryBank" => {
                    #[allow(non_camel_case_types)]
                    struct StoreMemoryBankSvc<T: SmartMemoryMcp>(pub Arc<T>);
                    impl<
                        T: SmartMemoryMcp,
                    > tonic::server::UnaryService<super::MemoryBankStoreRequest>
                    for StoreMemoryBankSvc<T> {
                        type Response = super::MemoryBankStoreResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MemoryBankStoreRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SmartMemoryMcp>::store_memory_bank(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StoreMemoryBankSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/smart_memory.SmartMemoryMcp/GetMemoryBankContext" => {
                    #[allow(non_camel_case_types)]
                    struct GetMemoryBankContextSvc<T: SmartMemoryMcp>(pub Arc<T>);
                    impl<
                        T: SmartMemoryMcp,
                    > tonic::server::UnaryService<super::MemoryBankContextRequest>
                    for GetMemoryBankContextSvc<T> {
                        type Response = super::MemoryBankContextResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MemoryBankContextRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SmartMemoryMcp>::get_memory_bank_context(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetMemoryBankContextSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/smart_memory.SmartMemoryMcp/OptimizeMemoryBank" => {
                    #[allow(non_camel_case_types)]
                    struct OptimizeMemoryBankSvc<T: SmartMemoryMcp>(pub Arc<T>);
                    impl<
                        T: SmartMemoryMcp,
                    > tonic::server::UnaryService<super::MemoryBankOptimizeRequest>
                    for OptimizeMemoryBankSvc<T> {
                        type Response = super::MemoryBankOptimizeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MemoryBankOptimizeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SmartMemoryMcp>::optimize_memory_bank(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = OptimizeMemoryBankSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/smart_memory.SmartMemoryMcp/GetMemoryBankStats" => {
                    #[allow(non_camel_case_types)]
                    struct GetMemoryBankStatsSvc<T: SmartMemoryMcp>(pub Arc<T>);
                    impl<
                        T: SmartMemoryMcp,
                    > tonic::server::UnaryService<super::MemoryBankStatsRequest>
                    for GetMemoryBankStatsSvc<T> {
                        type Response = super::MemoryBankStatsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MemoryBankStatsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SmartMemoryMcp>::get_memory_bank_stats(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetMemoryBankStatsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/smart_memory.SmartMemoryMcp/HandleUmbCommand" => {
                    #[allow(non_camel_case_types)]
                    struct HandleUmbCommandSvc<T: SmartMemoryMcp>(pub Arc<T>);
                    impl<
                        T: SmartMemoryMcp,
                    > tonic::server::UnaryService<super::UmbCommandRequest>
                    for HandleUmbCommandSvc<T> {
                        type Response = super::UmbCommandResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UmbCommandRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SmartMemoryMcp>::handle_umb_command(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = HandleUmbCommandSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: SmartMemoryMcp> Clone for SmartMemoryMcpServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: SmartMemoryMcp> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: SmartMemoryMcp> tonic::server::NamedService for SmartMemoryMcpServer<T> {
        const NAME: &'static str = "smart_memory.SmartMemoryMcp";
    }
}
